# -*- coding: utf-8 -*-
""".ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jsp8KbyZfuyQD-pdgxyHghZm_JMv1Mo3
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from joblib import load
from sklearn.metrics import r2_score

# Load the models
model_T = load('enviroT.joblib')
model_rh = load('enviroRH.joblib')

# Streamlit App
st.title("Environmental Factors Prediction App")
st.markdown("""
This app predicts **Temperature (T)** and **Relative Humidity (rh)** using environmental data.
""")

# Sidebar for user input
st.sidebar.header("User Input")
uploaded_file = st.sidebar.file_uploader("Upload a CSV File", type=["csv"])

# Preprocessing Function
def preprocess_data(data):
    # Replace invalid values with NaN
    data.replace(-9999, np.nan, inplace=True)
    data.interpolate(method='time', inplace=True)

    # Add time-based features
    data['hour'] = data.index.hour
    data['day'] = data.index.day
    data['month'] = data.index.month
    data['weekofyear'] = data.index.isocalendar().week

    # Add rolling averages (ensure no NaN remains)
    data['T_roll_mean'] = data['T'].rolling(window=3).mean()
    data['rh_roll_mean'] = data['rh'].rolling(window=3).mean()
    data.dropna(inplace=True)

    return data

# Load and preprocess data
if uploaded_file:
    user_data = pd.read_csv(uploaded_file)
    user_data['date'] = pd.to_datetime(user_data['date'], format='%d-%m-%Y %H:%M')
    user_data.set_index('date', inplace=True)
    st.sidebar.write("Uploaded Data:")
    st.sidebar.dataframe(user_data.head())
else:
    file_path = 'environmental_factors.csv'  # Default file path
    user_data = pd.read_csv(file_path)
    user_data['date'] = pd.to_datetime(user_data['date'], format='%d-%m-%Y %H:%M')
    user_data.set_index('date', inplace=True)
    st.sidebar.write("Using default dataset")

processed_data = preprocess_data(user_data.copy())
X = processed_data.drop(['T', 'rh'], axis=1, errors='ignore')

# Make Predictions
st.header("Prediction Results")
if 'T' in processed_data.columns:
    y_pred_T = model_T.predict(X)
    processed_data['Predicted_T'] = y_pred_T
    st.subheader("Temperature Predictions")
    st.line_chart(processed_data[['T', 'Predicted_T']])

if 'rh' in processed_data.columns:
    y_pred_rh = model_rh.predict(X)
    processed_data['Predicted_rh'] = y_pred_rh
    st.subheader("Relative Humidity Predictions")
    st.line_chart(processed_data[['rh', 'Predicted_rh']])

# Summary Statistics
st.subheader("Summary Statistics")
if 'T' in processed_data.columns:
    r2_T = r2_score(processed_data['T'], processed_data['Predicted_T'])
    st.write(f"**Temperature (T):** R2 = {r2_T:.2f}")
if 'rh' in processed_data.columns:
    r2_rh = r2_score(processed_data['rh'], processed_data['Predicted_rh'])
    st.write(f"**Relative Humidity (rh):** R2 = {r2_rh:.2f}")

# Download Option
st.subheader("Download Predictions")
if st.button("Download CSV"):
    processed_data.to_csv("predicted_data.csv")
    st.write("Download is ready!")
    st.download_button("Download CSV", processed_data.to_csv().encode('utf-8'), "predicted_data.csv", "text/csv")

